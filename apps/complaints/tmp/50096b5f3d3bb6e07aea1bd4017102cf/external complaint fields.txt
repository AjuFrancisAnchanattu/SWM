public function defineForm()
	{
		$today = date("Y-m-d",time());
		$next_week_date = date("Y-m-d",time() + 604800);

		// define the actual form
		$this->form = new form("complaintExternal");
		$this->form->setStoreInSession(true);
		$this->form->showLegend(true);
		$this->form->groupsToExclude = array();

		$initiation = new group("initiation");
		$typeOfComplaintGroup = new group("typeOfComplaintGroup");
		$verificationOfStockYes = new group("verificationOfStockYes");
		$typeOfComplaintGroup1 = new group("typeOfComplaintGroup1");
		$typeOfComplaintGroup11 = new group("typeOfComplaintGroup11");
		$complaintJustifiedNoGroup = new group("complaintJustifiedNoGroup");
		$typeOfComplaintGroup2 = new group("typeOfComplaintGroup2");
		$sendToUser = new group("sendToUser");

		$id = new textbox("id");
		$id->setTable("complaintExternal");
		$id->setVisible(false);
		$id->setIgnore(true);
		$id->setDataType("number");
		$initiation->add($id);

		$extStatus = new textbox("extStatus");
		$extStatus->setTable("complaintExternal");
		$extStatus->setVisible(false);
		$extStatus->setIgnore(false);
		$extStatus->setDataType("string");
		$initiation->add($extStatus);
		
		$containmentActionAdded = new textbox("containmentActionAdded");
		$containmentActionAdded->setTable("complaintExternal");
		$containmentActionAdded->setVisible(false);
		$containmentActionAdded->setIgnore(false);
		$containmentActionAdded->setDataType("string");
		$initiation->add($containmentActionAdded);
		
		$sp_materialInvolved = new textbox("sp_materialInvolved");
		$sp_materialInvolved->setGroup("typeOfComplaintGroup");
		$sp_materialInvolved->setDataType("string");
		$sp_materialInvolved->setVisible(false);
		$sp_materialInvolved->setRowTitle("material_involved");
		$sp_materialInvolved->setTable("complaintExternal");
		$typeOfComplaintGroup->add($sp_materialInvolved);

		$openDate = new textbox("openDate");
		$openDate->setTable("complaint");
		$openDate->setVisible(false);
		$openDate->setIgnore(false);
		$openDate->setDataType("text");
		$initiation->add($openDate);

		$openDate = new readonly("openDate");
		$openDate->setGroup("typeOfComplaintGroup");
		$openDate->setDataType("string");
		$openDate->setLabel("1 - Information");
		$openDate->setRowTitle("scapa_complaint_date");
		$openDate->setTable("complaintExternal");
		$openDate->setHelpId(10001);
		$typeOfComplaintGroup->add($openDate);
		
		$sp_siteConcerned = new readonly("sp_siteConcerned");
		$sp_siteConcerned->setGroup("typeOfComplaintGroup");
		$sp_siteConcerned->setDataType("string");
		$sp_siteConcerned->setRowTitle("site_concerned");
		$sp_siteConcerned->setTable("complaintExternal");
		$sp_siteConcerned->setHelpId(10001);
		$typeOfComplaintGroup->add($sp_siteConcerned);
		
		$sp_buyer = new readonly("sp_buyer");
		$sp_buyer->setGroup("typeOfComplaintGroup");
		$sp_buyer->setDataType("string");
		$sp_buyer->setRowTitle("buyer");
		$sp_buyer->setTable("complaintExternal");
		$sp_buyer->setHelpId(10001);
		$typeOfComplaintGroup->add($sp_buyer);
		
		$category = new readonly("category");
		$category->setGroup("typeOfComplaintGroup");
		$category->setDataType("string");
		$category->setLength(255);
		$category->setRowTitle("apparent_category");
		$category->setTable("complaintExternal");
		$category->setHelpId(8005);
		$typeOfComplaintGroup->add($category);

		//$colour = new readonly("colour");
		//$colour->setGroup("typeOfComplaintGroup");
		//$colour->setDataType("string");
		//$colour->setRowTitle("colour");
		//$colour->setTable("complaintExternal");
		//$colour->setHelpId(10002);
		//$typeOfComplaintGroup->add($colour);

		$batchNumber = new readonly("batchNumber");
		$batchNumber->setGroup("typeOfComplaintGroup");
		$batchNumber->setDataType("string");
		$batchNumber->setRowTitle("batch_number");
		$batchNumber->setTable("complaintExternal");
		$batchNumber->setHelpId(10003);
		$typeOfComplaintGroup->add($batchNumber);

		/*$dimensionThickness = new readonly("dimensionThickness");
		$dimensionThickness->setGroup("typeOfComplaintGroup");
		$dimensionThickness->setDataType("string");
		$dimensionThickness->setRowTitle("thickness");
		$dimensionThickness->setTable("complaintExternal");
		$dimensionThickness->setHelpId(10004);
		$typeOfComplaintGroup->add($dimensionThickness);

		$dimensionWidth = new readonly("dimensionWidth");
		$dimensionWidth->setGroup("typeOfComplaintGroup");
		$dimensionWidth->setDataType("string");
		$dimensionWidth->setRowTitle("width");
		$dimensionWidth->setTable("complaintExternal");
		$dimensionWidth->setHelpId(10005);
		$typeOfComplaintGroup->add($dimensionWidth);

		$dimensionLength = new readonly("dimensionLength");
		$dimensionLength->setGroup("typeOfComplaintGroup");
		$dimensionLength->setDataType("string");
		$dimensionLength->setRowTitle("length");
		$dimensionLength->setTable("complaintExternal");
		$dimensionLength->setHelpId(10006);
		$typeOfComplaintGroup->add($dimensionLength);*/

		//$invoiceNo = new readonly("invoiceNo");
		//$invoiceNo->setGroup("typeOfComplaintGroup");
		//$invoiceNo->setDataType("string");
		//$invoiceNo->setRowTitle("invoice_no");
		//$invoiceNo->setTable("complaintExternal");
		//$invoiceNo->setHelpId(10007);
		//$typeOfComplaintGroup->add($invoiceNo);

		//$invoiceDate = new readonly("invoiceDate");
		//$invoiceDate->setGroup("typeOfComplaintGroup");
		//$invoiceDate->setDataType("string");
		//$invoiceDate->setRowTitle("invoice_date");
		//$invoiceDate->setTable("complaintExternal");
		//$invoiceDate->setHelpId(10008);
		//$typeOfComplaintGroup->add($invoiceDate);

		//$scapaPartNo = new readonly("scapaPartNo");
		//$scapaPartNo->setGroup("typeOfComplaintGroup");
		//$scapaPartNo->setDataType("string");
		//$scapaPartNo->setRowTitle("scapa_part_no");
		//$scapaPartNo->setTable("complaintExternal");
		//$scapaPartNo->setHelpId(10009);
		//$typeOfComplaintGroup->add($scapaPartNo);

		//$supplierConfirmNo = new readonly("supplierConfirmNo");
		//$supplierConfirmNo->setGroup("typeOfComplaintGroup");
		//$supplierConfirmNo->setDataType("string");
		//$supplierConfirmNo->setRowTitle("supplier_confirm_no");
		//$supplierConfirmNo->setTable("complaintExternal");
		//$supplierConfirmNo->setHelpId(10010);
		//$typeOfComplaintGroup->add($supplierConfirmNo);

		$productDescription = new readonly("productDescription");
		$productDescription->setGroup("typeOfComplaintGroup");
		$productDescription->setDataType("string");
		$productDescription->setRowTitle("material_description");
		$productDescription->setTable("complaintExternal");
		$productDescription->setHelpId(10011);
		$typeOfComplaintGroup->add($productDescription);

		$sapItems = new readonly("sapItems");
		$sapItems->setGroup("typeOfComplaintGroup");
		$sapItems->setDataType("string");
		$sapItems->setRowTitle("material_number");
		$sapItems->setTable("complaintExternal");
		$sapItems->setHelpId(10012);
		$typeOfComplaintGroup->add($sapItems);

//		$quantity = new readonly("quantity");
//		$quantity->setGroup("typeOfComplaintGroup");
//		$quantity->setDataType("string");
//		$quantity->setRowTitle("quantity_received");
//		$quantity->setTable("complaintExternal");
//		$quantity->setHelpId(10013);
//		$typeOfComplaintGroup->add($quantity);
		
		$sp_quantityRecieved = new readonly("sp_quantityRecieved");
		$sp_quantityRecieved->setGroup("typeOfComplaintGroup");
		$sp_quantityRecieved->setDataType("string");
		$sp_quantityRecieved->setRowTitle("quantity_received");
		$sp_quantityRecieved->setTable("complaintExternal");
		$sp_quantityRecieved->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_quantityRecieved);
		
		$quantityUnderComplaint = new readonly("quantityUnderComplaint");
		$quantityUnderComplaint->setGroup("typeOfComplaintGroup");
		$quantityUnderComplaint->setDataType("string");
		$quantityUnderComplaint->setRowTitle("quantity_under_complaint");
		$quantityUnderComplaint->setTable("complaintExternal");
		$quantityUnderComplaint->setHelpId(10014);
		$typeOfComplaintGroup->add($quantityUnderComplaint);
		
		$complaintValue = new readonly("complaintValue");
		$complaintValue->setGroup("typeOfComplaintGroup");
		$complaintValue->setDataType("string");
		$complaintValue->setRowTitle("complaint_value");
		$complaintValue->setTable("complaintExternal");
		$complaintValue->setHelpId(10014);
		$typeOfComplaintGroup->add($complaintValue);
		
		$sp_additionalComplaintCost = new readonly("sp_additionalComplaintCost");
		$sp_additionalComplaintCost->setGroup("typeOfComplaintGroup");
		$sp_additionalComplaintCost->setDataType("string");
		$sp_additionalComplaintCost->setRowTitle("additional_complaint_cost");
		$sp_additionalComplaintCost->setTable("complaintExternal");
		$sp_additionalComplaintCost->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_additionalComplaintCost);
		
		$sp_detailsOfComplaintCost = new readonly("sp_detailsOfComplaintCost");
		$sp_detailsOfComplaintCost->setGroup("typeOfComplaintGroup");
		$sp_detailsOfComplaintCost->setDataType("string");
		$sp_detailsOfComplaintCost->setRowTitle("details_of_complaint_cost");
		$sp_detailsOfComplaintCost->setTable("complaintExternal");
		$sp_detailsOfComplaintCost->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_detailsOfComplaintCost);

		$materialGroup = new readonly("materialGroup");
		$materialGroup->setGroup("typeOfComplaintGroup");
		$materialGroup->setDataType("string");
		$materialGroup->setRowTitle("material_group");
		$materialGroup->setTable("complaintExternal");
		$materialGroup->setHelpId(10014);
		$typeOfComplaintGroup->add($materialGroup);
		
		$sp_supplierItemNumber = new readonly("sp_supplierItemNumber");
		$sp_supplierItemNumber->setGroup("typeOfComplaintGroup");
		$sp_supplierItemNumber->setDataType("string");
		$sp_supplierItemNumber->setRowTitle("supplier_item_number");
		$sp_supplierItemNumber->setTable("complaintExternal");
		$sp_supplierItemNumber->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_supplierItemNumber);
		
		$sp_supplierProductDescription = new readonly("sp_supplierProductDescription");
		$sp_supplierProductDescription->setGroup("typeOfComplaintGroup");
		$sp_supplierProductDescription->setDataType("string");
		$sp_supplierProductDescription->setRowTitle("supplier_product_description");
		$sp_supplierProductDescription->setTable("complaintExternal");
		$sp_supplierProductDescription->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_supplierProductDescription);
		
		$sp_goodsReceivedDate = new readonly("sp_goodsReceivedDate");
		$sp_goodsReceivedDate->setGroup("typeOfComplaintGroup");
		$sp_goodsReceivedDate->setDataType("string");
		$sp_goodsReceivedDate->setRowTitle("goods_received_date");
		$sp_goodsReceivedDate->setTable("complaintExternal");
		$sp_goodsReceivedDate->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_goodsReceivedDate);
		
		$sp_goodsReceivedNumber = new readonly("sp_goodsReceivedNumber");
		$sp_goodsReceivedNumber->setGroup("typeOfComplaintGroup");
		$sp_goodsReceivedNumber->setDataType("string");
		$sp_goodsReceivedNumber->setRowTitle("goods_received_number");
		$sp_goodsReceivedNumber->setTable("complaintExternal");
		$sp_goodsReceivedNumber->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_goodsReceivedNumber);
				
		$sp_purchaseOrderNumber = new readonly("sp_purchaseOrderNumber");
		$sp_purchaseOrderNumber->setGroup("typeOfComplaintGroup");
		$sp_purchaseOrderNumber->setDataType("string");
		$sp_purchaseOrderNumber->setRowTitle("purchase_order_number");
		$sp_purchaseOrderNumber->setTable("complaintExternal");
		$sp_purchaseOrderNumber->setHelpId(10014);
		$typeOfComplaintGroup->add($sp_purchaseOrderNumber);
		
		$g8d = new readonly("g8d");
		$g8d->setGroup("typeOfComplaintGroup");
		$g8d->setDataType("string");
		$g8d->setRowTitle("full_8d_required");
		$g8d->setTable("complaintExternal");
		$g8d->setHelpId(10014);
		$typeOfComplaintGroup->add($g8d);

		$attachment = new attachment("attachment");		
		$attachment->setTempFileLocation("/apps/complaintsExternal/tmp");
		$attachment->setFinalFileLocation("/apps/complaintsExternal/attachments");
		$attachment->setHelpId(11);
		$typeOfComplaintGroup->add($attachment);

		// not needed as can be displayed on left hand side

		/*$scapaContact = new readonly("scapaContact");
		$scapaContact->setGroup("typeOfComplaintGroup");
		$scapaContact->setDataType("string");
		$scapaContact->setRowTitle("scapa_contact");
		$scapaContact->setTable("complaintExternal");
		$scapaContact->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaContact);

		$scapaTel = new readonly("scapaTel");
		$scapaTel->setGroup("typeOfComplaintGroup");
		$scapaTel->setDataType("string");
		$scapaTel->setRowTitle("scapa_tel");
		$scapaTel->setTable("complaintExternal");
		$scapaTel->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaTel);

		$scapaSite = new readonly("scapaSite");
		$scapaSite->setGroup("typeOfComplaintGroup");
		$scapaSite->setDataType("string");
		$scapaSite->setRowTitle("scapa_site");
		$scapaSite->setTable("complaintExternal");
		$scapaSite->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaSite);

		$scapaEmail = new readonly("scapaEmail");
		$scapaEmail->setGroup("typeOfComplaintGroup");
		$scapaEmail->setDataType("string");
		$scapaEmail->setRowTitle("scapa_email");
		$scapaEmail->setTable("complaintExternal");
		$scapaEmail->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaEmail);

		$scapaSupplierNumber = new readonly("scapaSupplierNumber");
		$scapaSupplierNumber->setGroup("typeOfComplaintGroup");
		$scapaSupplierNumber->setDataType("string");
		$scapaSupplierNumber->setRowTitle("supplier_number");
		$scapaSupplierNumber->setTable("complaintExternal");
		$scapaSupplierNumber->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaSupplierNumber);

		$scapaSupplierName = new readonly("scapaSupplierName");
		$scapaSupplierName->setGroup("typeOfComplaintGroup");
		$scapaSupplierName->setDataType("string");
		$scapaSupplierName->setRowTitle("supplier_name");
		$scapaSupplierName->setTable("complaintExternal");
		$scapaSupplierName->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaSupplierName);

		$scapaSupplierContact = new textbox("scapaSupplierContact");
		$scapaSupplierContact->setGroup("typeOfComplaintGroup");
		$scapaSupplierContact->setDataType("string");
		$scapaSupplierContact->setRowTitle("scapa_supplier_contact");
		$scapaSupplierContact->setTable("complaintExternal");
		$scapaSupplierContact->setHelpId(8199);
		$typeOfComplaintGroup->add($scapaSupplierContact);*/

		$problemDescription = new readonly("problemDescription");
		$problemDescription->setGroup("typeOfComplaintGroup");
		$problemDescription->setDataType("string");
		$problemDescription->setLabel("2 - Problem Description");
		$problemDescription->setRowTitle("problem_description");
		$problemDescription->setTable("complaintExternal");
		$problemDescription->setHelpId(10015);
		$typeOfComplaintGroup->add($problemDescription);

		$sp_sampleSent = new readonly("sp_sampleSent");
		$sp_sampleSent->setTable("complaintExternal");
		$sp_sampleSent->setLength(20);
		//$sp_sampleSent->setArraySource(array(
		//	array('value' => 'Yes', 'display' => 'Yes'),
		//	array('value' => 'No', 'display' => 'No')
		//));
		if(isset($savedFields["sampleForwarded"]))
			$sp_sampleSent->setValue($savedFields["sampleForwarded"]);
		$sp_sampleSent->setDataType("string");
		$sp_sampleSent->setHelpId(10016);
		$sp_sampleSent->setRowTitle("sample_forwarded_by_scapa");
		$typeOfComplaintGroup->add($sp_sampleSent);

		$sp_sampleSentDate = new readonly("sp_sampleSentDate");
		$sp_sampleSentDate->setGroup("typeOfComplaintGroup");
		$sp_sampleSentDate->setDataType("date");
		$sp_sampleSentDate->setRowTitle("sample_date");
		$sp_sampleSentDate->setTable("complaintExternal");
		$sp_sampleSentDate->setHelpId(10017);
		$typeOfComplaintGroup->add($sp_sampleSentDate);

//		$sampleReceivedDate = new textbox("sampleReceivedDate");
//		$sampleReceivedDate->setGroup("typeOfComplaintGroup");
//		$sampleReceivedDate->setDataType("date");
//		$sampleReceivedDate->setRowTitle("sample_received_date");
//		$sampleReceivedDate->setTable("complaintExternal");
//		$sampleReceivedDate->setHelpId(8199);
//		$typeOfComplaintGroup->add($sampleReceivedDate);

//		$containmentAction = new readonly("containmentAction");
//		$containmentAction->setGroup("typeOfComplaintGroup");
//		$containmentAction->setDataType("string");
//		$containmentAction->setRowTitle("actions_by_scapa_to_minimise_problem");
//		$containmentAction->setTable("complaintExternal");
//		$containmentAction->setHelpId(10019);
//		$typeOfComplaintGroup->add($containmentAction);

		$actionRequested = new readonly("actionRequested");
		$actionRequested->setGroup("typeOfComplaintGroup");
		$actionRequested->setDataType("string");
		$actionRequested->setRowTitle("actions_by_scapa_to_minimise_problem");
		$actionRequested->setTable("complaintExternal");
		$actionRequested->setHelpId(10019);
		$typeOfComplaintGroup->add($actionRequested);

		$teamLeader = new textbox("teamLeader");
		$teamLeader->setGroup("typeOfComplaintGroup");
		$teamLeader->setDataType("string");
		$teamLeader->setRowTitle("team_leader");
		$teamLeader->setLabel("*** PLEASE FILL IN FROM HERE DOWN *** - 3 - Immediate Supplier Actions - *** PLEASE FILL IN FROM HERE DOWN ***");
		$teamLeader->setRowTitle("person_responsible");
		$teamLeader->setTable("complaintExternal");
		$teamLeader->setHelpId(10018);
		$typeOfComplaintGroup->add($teamLeader);
		
		$verificationOfStock = new radio("verificationOfStock");
		$verificationOfStock->setGroup("typeOfComplaintGroup");
		$verificationOfStock->setDataType("string");
		$verificationOfStock->setRowTitle("verification_of_stock");
		$verificationOfStock->setRequired(false);
		$verificationOfStock->setLabel("3B - Verification Of Stock");
		$verificationOfStock->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$verificationOfStock->setTable("complaintExternal");
		$verificationOfStock->setHelpId(10022);
		$verificationOfStock->setValue("YES");

		// Dependency
		$verificationOfStock_dependency = new dependency();
		$verificationOfStock_dependency->addRule(new rule('typeOfComplaintGroup', 'verificationOfStock', 'YES'));
		$verificationOfStock_dependency->setGroup('verificationOfStockYes');
		$verificationOfStock_dependency->setShow(true);

		$verificationOfStock->addControllingDependency($verificationOfStock_dependency);
		$typeOfComplaintGroup->add($verificationOfStock);
		
		
		$warehouseDate = new textbox("warehouseDate");
		$warehouseDate->setGroup("verificationOfStockYes");
		$warehouseDate->setDataType("date");
		$warehouseDate->setRowTitle("warehouse_stock_date");
		$warehouseDate->setTable("complaintExternal");
		$warehouseDate->setHelpId(10018);
		$verificationOfStockYes->add($warehouseDate);
		
		$defectQuantity = new measurement("defectQuantity");
		$defectQuantity->setGroup("verificationOfStockYes");
		$defectQuantity->setDataType("string");
		$defectQuantity->setRowTitle("defect_quantity");
		$defectQuantity->setXMLSource("./apps/complaintsExternal/xml/uom.xml");
		$defectQuantity->setTable("complaintExternal");
		$defectQuantity->setHelpId(10018);
		$verificationOfStockYes->add($defectQuantity);
		
		$productionDate = new textbox("productionDate");
		$productionDate->setGroup("verificationOfStockYes");
		$productionDate->setDataType("date");
		$productionDate->setRowTitle("production_date");
		$productionDate->setTable("complaintExternal");
		$productionDate->setHelpId(10018);
		$verificationOfStockYes->add($productionDate);
		
		$defectQuantity2 = new measurement("defectQuantity2");
		$defectQuantity2->setGroup("verificationOfStockYes");
		$defectQuantity2->setDataType("string");
		$defectQuantity2->setRowTitle("defect_quantity");
		$defectQuantity2->setXMLSource("./apps/complaintsExternal/xml/uom.xml");
		$defectQuantity2->setTable("complaintExternal");
		$defectQuantity2->setHelpId(10018);
		$verificationOfStockYes->add($defectQuantity2);
		
		$transitDate = new textbox("transitDate");
		$transitDate->setGroup("verificationOfStockYes");
		$transitDate->setDataType("date");
		$transitDate->setRowTitle("transit_date");
		$transitDate->setTable("complaintExternal");
		$transitDate->setHelpId(10018);
		$verificationOfStockYes->add($transitDate);
		
		$defectQuantity3 = new measurement("defectQuantity3");
		$defectQuantity3->setGroup("verificationOfStockYes");
		$defectQuantity3->setDataType("string");
		$defectQuantity3->setRowTitle("defect_quantity");
		$defectQuantity3->setXMLSource("./apps/complaintsExternal/xml/uom.xml");
		$defectQuantity3->setTable("complaintExternal");
		$defectQuantity3->setHelpId(10018);
		$verificationOfStockYes->add($defectQuantity3);
		
		$invoiceDeliveryNote = new textbox("invoiceDeliveryNote");
		$invoiceDeliveryNote->setGroup("verificationOfStockYes");
		$invoiceDeliveryNote->setDataType("string");
		$invoiceDeliveryNote->setRowTitle("invoice_delivery_note");
		$invoiceDeliveryNote->setTable("complaintExternal");
		$invoiceDeliveryNote->setHelpId(10018);
		$verificationOfStockYes->add($invoiceDeliveryNote);
		
		$goodJobInvoiceNo = new textbox("goodJobInvoiceNo");
		$goodJobInvoiceNo->setGroup("typeOfComplaintGroup");
		$goodJobInvoiceNo->setDataType("string");
		$goodJobInvoiceNo->setRowTitle("invoice_no");
		$goodJobInvoiceNo->setLabel("3C - Good Material Information");
		$goodJobInvoiceNo->setTable("complaintExternal");
		$goodJobInvoiceNo->setHelpId(10018);
		$typeOfComplaintGroup1->add($goodJobInvoiceNo);
		
		$deliveryNote = new textbox("deliveryNote");
		$deliveryNote->setGroup("typeOfComplaintGroup");
		$deliveryNote->setDataType("string");
		$deliveryNote->setRowTitle("delivery_note");
		$deliveryNote->setTable("complaintExternal");
		$deliveryNote->setHelpId(10018);
		$typeOfComplaintGroup1->add($deliveryNote);
		
		$containmentAction = new textarea("containmentAction");
		if(isset($savedFields["containmentAction"]))
		$containmentAction->setValue($savedFields["containmentAction"]);
		$containmentAction->setGroup("typeOfComplaintGroup1");
		$containmentAction->setDataType("text");
		//$containmentAction->setRowTitle("containment_action");
		$containmentAction->setRowTitle("containment_action");
		$containmentAction->setLabel("Containment Action");
		$containmentAction->setRequired(true);
		$containmentAction->setTable("complaintExternal");
		$containmentAction->setHelpId(9037);
		$typeOfComplaintGroup1->add($containmentAction);
		
		$containmentActionReadOnly = new readonly("containmentActionReadOnly");
		$containmentActionReadOnly->setGroup("typeOfComplaintGroup1");
		$containmentActionReadOnly->setDataType("text");
		$containmentActionReadOnly->setLength(255);
		//$containmentAction->setRowTitle("containment_action");
		$containmentActionReadOnly->setRowTitle("containment_action");
		$containmentActionReadOnly->setLabel("Containment Action");
		$containmentActionReadOnly->setVisible(false);
		$containmentActionReadOnly->setHelpId(9037);
		$typeOfComplaintGroup1->add($containmentActionReadOnly);
		
		$submitFirst = new submit("submitFirst");
		$submitFirst->setGroup("typeOfComplaintGroup1");
		$submitFirst->setVisible(true);
		$typeOfComplaintGroup1->add($submitFirst);

		$analysis = new textarea("analysis");
		$analysis->setGroup("typeOfComplaintGroup11");
		$analysis->setDataType("text");
		$analysis->setRowTitle("analysis");
		$analysis->setLabel("4 - Evaluation and Action");
		$analysis->setTable("complaintExternal");
		$analysis->setHelpId(10020);
		$typeOfComplaintGroup11->add($analysis);
		
		$nameOfAnalysis = new textbox("nameOfAnalysis");
		$nameOfAnalysis->setGroup("typeOfComplaintGroup11");
		$nameOfAnalysis->setDataType("string");
		$nameOfAnalysis->setRowTitle("name");
		$nameOfAnalysis->setTable("complaintExternal");
		$nameOfAnalysis->setHelpId(10026);
		$typeOfComplaintGroup11->add($nameOfAnalysis);

		$dateOfAnalysis = new textbox("dateOfAnalysis");
		$dateOfAnalysis->setGroup("typeOfComplaintGroup11");
		$dateOfAnalysis->setDataType("date");
		$dateOfAnalysis->setRowTitle("team_leader");
		$dateOfAnalysis->setRowTitle("date");
		$dateOfAnalysis->setTable("complaintExternal");
		$dateOfAnalysis->setHelpId(10026);
		$typeOfComplaintGroup11->add($dateOfAnalysis);	
		
		$complaintJustified = new radio("complaintJustified");
		$complaintJustified->setGroup("typeOfComplaintGroup");
		$complaintJustified->setDataType("string");
		$complaintJustified->setRowTitle("complaint_accepted");
		$complaintJustified->setRequired(false);
		$complaintJustified->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$complaintJustified->setTable("complaintExternal");
		$complaintJustified->setHelpId(10022);
		$complaintJustified->setValue("YES");

		// Dependency
		$complaintJustified_dependency = new dependency();
		$complaintJustified_dependency->addRule(new rule('typeOfComplaintGroup11', 'complaintJustified', 'NO'));
		$complaintJustified_dependency->setGroup('complaintJustifiedNoGroup');
		$complaintJustified_dependency->setShow(false);

		$complaintJustified->addControllingDependency($complaintJustified_dependency);	
		$typeOfComplaintGroup11->add($complaintJustified);

		// Justify = No
		$returnGoods = new radio("returnGoods");
		$returnGoods->setGroup("complaintJustifiedNoGroup");
		$returnGoods->setDataType("string");
		$returnGoods->setRowTitle("return_goods");
		$returnGoods->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$returnGoods->setTable("complaintExternal");
		$returnGoods->setRequired(false);
		$returnGoods->setHelpId(10023);
		$returnGoods->setValue("NO");
		$complaintJustifiedNoGroup->add($returnGoods);

		// Justify = No
		$disposeGoods = new radio("disposeGoods");
		$disposeGoods->setGroup("complaintJustifiedNoGroup");
		$disposeGoods->setDataType("string");
		$disposeGoods->setRowTitle("dispose_goods");
		$disposeGoods->setRequired(false);
		$disposeGoods->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$disposeGoods->setTable("complaintExternal");
		$disposeGoods->setValue("NO");
		$disposeGoods->setHelpId(10024);
		$complaintJustifiedNoGroup->add($disposeGoods);

		// Justify = No
		$sp_materialCredited = new radio("sp_materialCredited");
		$sp_materialCredited->setGroup("complaintJustifiedNoGroup");
		$sp_materialCredited->setDataType("string");
		$sp_materialCredited->setLength(5);
		$sp_materialCredited->setArraySource(array(
			array('value' => 'YES', 'display' => 'Yes'),
			array('value' => 'NO', 'display' => 'No')
		));
		$sp_materialCredited->setRowTitle("material_credited");
		$sp_materialCredited->setRequired(false);
		if(isset($savedFields["sp_materialCredited"]))
			$sp_materialCredited->setValue($savedFields["sp_materialCredited"]);
		else $sp_materialCredited->setValue("NO");
		$sp_materialCredited->setTable("complaintExternal");
		$sp_materialCredited->setHelpId(9018);
		$complaintJustifiedNoGroup->add($sp_materialCredited);

		// Justify = No
		$sp_materialReplaced = new radio("sp_materialReplaced");
		$sp_materialReplaced->setGroup("complaintJustifiedNoGroup");
		$sp_materialReplaced->setDataType("string");
		$sp_materialReplaced->setLength(5);
		$sp_materialReplaced->setArraySource(array(
			array('value' => 'YES', 'display' => 'Yes'),
			array('value' => 'NO', 'display' => 'No')
		));
		$sp_materialReplaced->setRowTitle("material_replaced");
		$sp_materialReplaced->setRequired(false);
		if(isset($savedFields["sp_materialReplaced"]))
			$sp_materialReplaced->setValue($savedFields["sp_materialReplaced"]);
		else $sp_materialReplaced->setValue("NO");
		$sp_materialReplaced->setTable("complaintExternal");
		$sp_materialReplaced->setHelpId(9018);
		$complaintJustifiedNoGroup->add($sp_materialReplaced);
		
		$sp_useGoods = new radio("sp_useGoods");
		$sp_useGoods->setGroup("complaintJustifiedNoGroup");
		$sp_useGoods->setDataType("string");
		$sp_useGoods->setRowTitle("use_goods");
		$sp_useGoods->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$sp_useGoods->setTable("complaintExternal");
		$sp_useGoods->setRequired(false);
		$sp_useGoods->setHelpId(10023);
		$sp_useGoods->setValue("NO");
		$complaintJustifiedNoGroup->add($sp_useGoods);
		
		$sp_reworkGoods = new radio("sp_reworkGoods");
		$sp_reworkGoods->setGroup("complaintJustifiedNoGroup");
		$sp_reworkGoods->setDataType("string");
		$sp_reworkGoods->setRowTitle("rework_goods");
		$sp_reworkGoods->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$sp_reworkGoods->setTable("complaintExternal");
		$sp_reworkGoods->setRequired(false);
		$sp_reworkGoods->setHelpId(10023);
		$sp_reworkGoods->setValue("NO");
		$complaintJustifiedNoGroup->add($sp_reworkGoods);
		
		$sp_sortGoods = new radio("sp_sortGoods");
		$sp_sortGoods->setGroup("complaintJustifiedNoGroup");
		$sp_sortGoods->setDataType("string");
		$sp_sortGoods->setRowTitle("sort_goods");
		$sp_sortGoods->setArraySource(array(
				array('value' => 'YES', 'display' => 'Yes'),
				array('value' => 'NO', 'display' => 'No')
		));
		$sp_sortGoods->setTable("complaintExternal");
		$sp_sortGoods->setRequired(false);
		$sp_sortGoods->setHelpId(10023);
		$sp_sortGoods->setValue("NO");
		$complaintJustifiedNoGroup->add($sp_sortGoods);

//		$immediateAction = new textarea("immediateAction");
//		$immediateAction->setGroup("typeOfComplaintGroup");
//		$immediateAction->setDataType("string");
//		$immediateAction->setRowTitle("immediate_action");
//		$immediateAction->setTable("complaintExternal");
//		$immediateAction->setHelpId(10019);
//		$typeOfComplaintGroup->add($immediateAction);

//		$stockVerificationMade = new radio("stockVerificationMade");
//		$stockVerificationMade->setTable("complaintExternal");
//		$stockVerificationMade->setLabel("3 - Containment Actions");
//		$stockVerificationMade->setLength(20);
//		$stockVerificationMade->setArraySource(array(
//			array('value' => 'yes', 'display' => 'Yes'),
//			array('value' => 'no', 'display' => 'No')
//		));
//		if(isset($savedFields["stockVerificationMade"]))
//			$stockVerificationMade->setValue($savedFields["stockVerificationMade"]);
//		$stockVerificationMade->setDataType("string");
//		$stockVerificationMade->setRowTitle("stock_verification_made");
//		$typeOfComplaintGroup->add($stockVerificationMade);

//		$stockVerificationComment = new textarea("stockVerificationComment");
//		$stockVerificationComment->setGroup("typeOfComplaintGroup");
//		$stockVerificationComment->setDataType("string");
//		$stockVerificationComment->setRowTitle("stock_verification_comment");
//		$stockVerificationComment->setTable("complaintExternal");
//		$stockVerificationComment->setHelpId(8199);
//		$typeOfComplaintGroup->add($stockVerificationComment);

		
		// Justify = No
		$rootCauses = new textarea("rootCauses");
		$rootCauses->setGroup("complaintJustifiedNoGroup");
		$rootCauses->setDataType("text");
		$rootCauses->setRowTitle("root_cause");
		$rootCauses->setTable("complaintExternal");
		$rootCauses->setHelpId(10021);
		$complaintJustifiedNoGroup->add($rootCauses);
		
		// Justify = No
		$rootCausesAuthor = new textbox("rootCausesAuthor");
		if(isset($savedFields["rootCausesAuthor"]))
		$rootCausesAuthor->setValue($savedFields["rootCausesAuthor"]);
		$rootCausesAuthor->setGroup("complaintJustifiedNoGroup");
		$rootCausesAuthor->setDataType("string");
		$rootCausesAuthor->setLength(255);
		$rootCausesAuthor->setRowTitle("root_cause_author");
		$rootCausesAuthor->setRequired(false);
		$rootCausesAuthor->setTable("complaintExternal");
		$rootCausesAuthor->setHelpId(9037);
		$complaintJustifiedNoGroup->add($rootCausesAuthor);
		
		// Justify = No
		$rootCausesDate = new textbox("rootCausesDate");
		if(isset($savedFields["rootCausesDate"]))
		$rootCausesDate->setValue($savedFields["rootCausesDate"]);
		$rootCausesDate->setGroup("complaintJustifiedNoGroup");
		$rootCausesDate->setDataType("date");
		$rootCausesDate->setLength(255);
		$rootCausesDate->setRowTitle("root_cause_date");
		$rootCausesDate->setRequired(false);
		$rootCausesDate->setTable("complaintExternal");
		$rootCausesDate->setHelpId(9037);
		$complaintJustifiedNoGroup->add($rootCausesDate);

		// Justify = No
		$possibleSolutions = new textarea("possibleSolutions");
		$possibleSolutions->setGroup("complaintJustifiedNoGroup");
		$possibleSolutions->setDataType("text");
		$possibleSolutions->setRowTitle("team_leader");
		$possibleSolutions->setRowTitle("possible_solutions");
		$possibleSolutions->setTable("complaintExternal");
		$possibleSolutions->setHelpId(10028);
		$complaintJustifiedNoGroup->add($possibleSolutions);
		
		// Justify = No
		$possibleSolutionsAuthor = new textbox("possibleSolutionsAuthor");
		if(isset($savedFields["possibleSolutionsAuthor"]))
		$possibleSolutionsAuthor->setValue($savedFields["possibleSolutionsAuthor"]);
		$possibleSolutionsAuthor->setGroup("complaintJustifiedNoGroup");
		$possibleSolutionsAuthor->setDataType("string");
		$possibleSolutionsAuthor->setLength(255);
		$possibleSolutionsAuthor->setRowTitle("possible_solutions_author");
		$possibleSolutionsAuthor->setRequired(false);
		$possibleSolutionsAuthor->setTable("complaintExternal");
		$possibleSolutionsAuthor->setHelpId(9037);
		$complaintJustifiedNoGroup->add($possibleSolutionsAuthor);

		// Justify = No
		$possibleSolutionsDate = new textbox("possibleSolutionsDate");
		if(isset($savedFields["possibleSolutionsDate"]))
		$possibleSolutionsDate->setValue($savedFields["possibleSolutionsDate"]);
		$possibleSolutionsDate->setGroup("complaintJustifiedNoGroup");
		$possibleSolutionsDate->setDataType("date");
		$possibleSolutionsDate->setLength(255);
		$possibleSolutionsDate->setRowTitle("possible_solutions_date");
		$possibleSolutionsDate->setRequired(false);
		$possibleSolutionsDate->setTable("complaintExternal");
		$possibleSolutionsDate->setHelpId(9037);
		$complaintJustifiedNoGroup->add($possibleSolutionsDate);

		// Justify = No
		$implementedActions = new textarea("implementedActions");
		$implementedActions->setGroup("complaintJustifiedNoGroup");
		$implementedActions->setDataType("text");
		$implementedActions->setRowTitle("team_leader");
		$implementedActions->setRowTitle("implemented_perm_corr_actions");
		$implementedActions->setTable("complaintExternal");
		$implementedActions->setHelpId(10029);
		$complaintJustifiedNoGroup->add($implementedActions);
		
		// Justify = No
		$implementedActionsAuthor = new textbox("implementedActionsAuthor");
		if(isset($savedFields["implementedActionsAuthor"]))
		$implementedActionsAuthor->setValue($savedFields["implementedActionsAuthor"]);
		$implementedActionsAuthor->setGroup("complaintJustifiedNoGroup");
		$implementedActionsAuthor->setDataType("string");
		$implementedActionsAuthor->setLength(255);
		$implementedActionsAuthor->setRowTitle("implemented_actions_author");
		$implementedActionsAuthor->setRequired(false);
		$implementedActionsAuthor->setTable("complaintExternal");
		$implementedActionsAuthor->setHelpId(9021);
		$complaintJustifiedNoGroup->add($implementedActionsAuthor);

		// Justify = No
		$implementedActionsDate = new textbox("implementedActionsDate");
		if(isset($savedFields["implementedActionsDate"]))
		$implementedActionsDate->setValue($savedFields["implementedActionsDate"]);
		$implementedActionsDate->setGroup("complaintJustifiedNoGroup");
		$implementedActionsDate->setDataType("date");
		$implementedActionsDate->setLength(255);
		$implementedActionsDate->setRowTitle("implemented_actions_date_verified");
		$implementedActionsDate->setRequired(false);
		$implementedActionsDate->setTable("complaintExternal");
		$implementedActionsDate->setHelpId(9022);
		$complaintJustifiedNoGroup->add($implementedActionsDate);

//		$implementedActionsEstimated = new textbox("implementedActionsEstimated");
//		$implementedActionsEstimated->setGroup("typeOfComplaintGroup");
//		$implementedActionsEstimated->setDataType("date");
//		$implementedActionsEstimated->setRowTitle("estimated_date_imp");
//		$implementedActionsEstimated->setTable("complaintExternal");
//		$implementedActionsEstimated->setHelpId(10030);
//		$typeOfComplaintGroup->add($implementedActionsEstimated);
//
//		$implementedActionsImplementation = new textbox("implementedActionsImplementation");
//		$implementedActionsImplementation->setGroup("typeOfComplaintGroup");
//		$implementedActionsImplementation->setDataType("date");
//		$implementedActionsImplementation->setRowTitle("team_leader");
//		$implementedActionsImplementation->setRowTitle("implemented_date_imp");
//		$implementedActionsImplementation->setTable("complaintExternal");
//		$implementedActionsImplementation->setHelpId(10031);
//		$typeOfComplaintGroup->add($implementedActionsImplementation);
//
//		$implementedActionsEffectiveness = new textbox("implementedActionsEffectiveness");
//		$implementedActionsEffectiveness->setGroup("typeOfComplaintGroup");
//		$implementedActionsEffectiveness->setDataType("date");
//		$implementedActionsEffectiveness->setRowTitle("team_leader");
//		$implementedActionsEffectiveness->setRowTitle("val_eff_date_imp");
//		$implementedActionsEffectiveness->setTable("complaintExternal");
//		$implementedActionsEffectiveness->setHelpId(10032);
//		$typeOfComplaintGroup->add($implementedActionsEffectiveness);

		// Justify = No
		$preventivePermCorrActions = new textarea("preventivePermCorrActions");
		$preventivePermCorrActions->setGroup("complaintJustifiedNoGroup");
		$preventivePermCorrActions->setDataType("text");
		$preventivePermCorrActions->setRowTitle("team_leader");
		$preventivePermCorrActions->setRowTitle("preventive_actions");
		$preventivePermCorrActions->setTable("complaintExternal");
		$preventivePermCorrActions->setHelpId(10033);
		$complaintJustifiedNoGroup->add($preventivePermCorrActions);

		// Justify = No
		$estimatedDatePrev = new textbox("estimatedDatePrev");
		$estimatedDatePrev->setGroup("complaintJustifiedNoGroup");
		$estimatedDatePrev->setDataType("date");
		$estimatedDatePrev->setRowTitle("team_leader");
		$estimatedDatePrev->setRowTitle("preventive_action_verified_date");
		$estimatedDatePrev->setTable("complaintExternal");
		$estimatedDatePrev->setHelpId(10034);
		$complaintJustifiedNoGroup->add($estimatedDatePrev);

//		$implementationDatePrev = new textbox("implementationDatePrev");
//		$implementationDatePrev->setGroup("typeOfComplaintGroup");
//		$implementationDatePrev->setDataType("date");
//		$implementationDatePrev->setRowTitle("team_leader");
//		$implementationDatePrev->setRowTitle("implementation_date_prev");
//		$implementationDatePrev->setTable("complaintExternal");
//		$implementationDatePrev->setHelpId(10035);
//		$typeOfComplaintGroup->add($implementationDatePrev);
//
//		$valEffDatePrev = new textbox("valEffDatePrev");
//		$valEffDatePrev->setGroup("typeOfComplaintGroup");
//		$valEffDatePrev->setDataType("date");
//		$valEffDatePrev->setRowTitle("team_leader");
//		$valEffDatePrev->setRowTitle("val_eff_date_prev");
//		$valEffDatePrev->setTable("complaintExternal");
//		$valEffDatePrev->setHelpId(10036);
//		$typeOfComplaintGroup->add($valEffDatePrev);

		$managementSystemReviewed = new radio("managementSystemReviewed");
		$managementSystemReviewed->setTable("complaintExternal");
		$managementSystemReviewed->setLength(20);
		$managementSystemReviewed->setArraySource(array(
			array('value' => 'YES', 'display' => 'Yes'),
			array('value' => 'NO', 'display' => 'No'),
			array('value' => 'NA', 'display' => 'N/A')
		));
		if(isset($savedFields["managementSystemReviewed"]))
			$managementSystemReviewed->setValue($savedFields["managementSystemReviewed"]);
		$managementSystemReviewed->setDataType("string");
		$managementSystemReviewed->setHelpId(10037);
		$managementSystemReviewed->setRowTitle("management_system_reviewed");
		$typeOfComplaintGroup2->add($managementSystemReviewed);

		$flowChart = new radio("flowChart");
		$flowChart->setTable("complaintExternal");
		$flowChart->setLength(20);
		$flowChart->setArraySource(array(
			array('value' => 'YES', 'display' => 'Yes'),
			array('value' => 'NO', 'display' => 'No'),
			array('value' => 'NA', 'display' => 'N/A')
		));
		if(isset($savedFields["flowChart"]))
			$flowChart->setValue($savedFields["flowChart"]);
		$flowChart->setDataType("string");
		$flowChart->setHelpId(10038);
		$flowChart->setRowTitle("flow_chart");
		$typeOfComplaintGroup2->add($flowChart);

		$fmea = new radio("fmea");
		$fmea->setTable("complaintExternal");
		$fmea->setLength(20);
		$fmea->setArraySource(array(
			array('value' => 'YES', 'display' => 'Yes'),
			array('value' => 'NO', 'display' => 'No'),
			array('value' => 'NA', 'display' => 'N/A')
		));
		if(isset($savedFields["fmea"]))
			$fmea->setValue($savedFields["fmea"]);
		$fmea->setDataType("string");
		$fmea->setRowTitle("fmea");
		$fmea->setHelpId(10039);
		$typeOfComplaintGroup2->add($fmea);

		$customerSpecification = new radio("customerSpecification");
		$customerSpecification->setTable("complaintExternal");
		$customerSpecification->setLength(20);
		$customerSpecification->setArraySource(array(
			array('value' => 'YES', 'display' => 'Yes'),
			array('value' => 'NO', 'display' => 'No'),
			array('value' => 'NA', 'display' => 'N/A')
		));
		if(isset($savedFields["customerSpecification"]))
			$customerSpecification->setValue($savedFields["customerSpecification"]);
		$customerSpecification->setDataType("string");
		$customerSpecification->setHelpId(10040);
		$customerSpecification->setRowTitle("specifications_customer");
		$typeOfComplaintGroup2->add($customerSpecification);

		$additionalComments = new textarea("additionalComments");
		$additionalComments->setGroup("typeOfComplaintGroup");
		$additionalComments->setDataType("text");
		$additionalComments->setHelpId(10041);
		$additionalComments->setRowTitle("any_additional_comments");
		$additionalComments->setTable("complaintExternal");
		$typeOfComplaintGroup2->add($additionalComments);

		$submit = new submit("submit");
		$submit->setGroup("sendToUser");
		$submit->setVisible(true);
		$sendToUser->add($submit);


		$this->form->add($initiation);
		$this->form->add($typeOfComplaintGroup);
		$this->form->add($verificationOfStockYes);
		$this->form->add($typeOfComplaintGroup1);
		$this->form->add($typeOfComplaintGroup11);
		$this->form->add($complaintJustifiedNoGroup);
		$this->form->add($typeOfComplaintGroup2);
		$this->form->add($sendToUser);

	}